package view;

import configuration.Exceptions.InvalidPermissionException;
import configuration.Exceptions.UnsuccessfulUpdateException;
import configuration.Exceptions.UsernotFoundException;
import controller.Services.CompetenceService;
import controller.Services.UserManagementService;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.geom.RoundRectangle2D;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Competences.CompetenceInterface;
import model.Users.UserModel;

/**
 *
 * @author Group9
 */
public class AssignmentCompetence extends javax.swing.JFrame {

    private CompetenceService comp = CompetenceService.getCompetenceService();
    private List<CompetenceInterface> list = new ArrayList<>();
    private List<UserModel> listMaintainers = new LinkedList<>();
    private UserManagementService user = UserManagementService.getUserManagementService();

    /**
     * Creates new form AssignementCompetence.
     *
     * @throws SQLException
     */
    public AssignmentCompetence() throws SQLException {
        initComponents();

        ImageIcon icon = new ImageIcon("src/icons/app_icon.png");
        setIconImage(icon.getImage());
        setTitle("Maintenance System App");
        setSize(610, 705);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                setShape(new RoundRectangle2D.Double(0, 0, getWidth(), getHeight(), 50, 50));
            }
        });

        getMaintainers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableInMaintainer = new javax.swing.JTable();
        jButtonSelect = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableNotInMaintainer = new javax.swing.JTable();
        jLabelExit = new javax.swing.JLabel();
        jLabelAdd = new javax.swing.JLabel();
        jLabelTitleAssigned = new javax.swing.JLabel();
        jLabelTitleNotAssigned = new javax.swing.JLabel();
        jLabelMinimize = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableMaintainers = new javax.swing.JTable();
        jLabelRemove = new javax.swing.JLabel();
        jLabelBack = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 204, 0));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jLabelTitle.setFont(new java.awt.Font("Impact", 1, 28)); // NOI18N
        jLabelTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("ASSIGNMENT COMPETENCES");

        jTableInMaintainer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableInMaintainer.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableInMaintainer);

        jButtonSelect.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jButtonSelect.setText("Select");
        jButtonSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSelectMouseClicked(evt);
            }
        });

        jTableNotInMaintainer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableNotInMaintainer.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTableNotInMaintainer);

        jLabelExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/exit.png"))); // NOI18N
        jLabelExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelExitMouseClicked(evt);
            }
        });

        jLabelAdd.setBackground(new java.awt.Color(255, 255, 255));
        jLabelAdd.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add_button.png"))); // NOI18N
        jLabelAdd.setText("Add");
        jLabelAdd.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 204, 0), new java.awt.Color(255, 204, 0), null, null));
        jLabelAdd.setOpaque(true);
        jLabelAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelAddMouseClicked(evt);
            }
        });

        jLabelTitleAssigned.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelTitleAssigned.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitleAssigned.setText("Competences Assigned");

        jLabelTitleNotAssigned.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelTitleNotAssigned.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitleNotAssigned.setText("Competences Not Assigned");

        jLabelMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/minimize.png"))); // NOI18N
        jLabelMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMinimizeMouseClicked(evt);
            }
        });

        jTableMaintainers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Name", "Surname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMaintainers.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTableMaintainers);

        jLabelRemove.setBackground(new java.awt.Color(255, 255, 255));
        jLabelRemove.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelRemove.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/del_button.png"))); // NOI18N
        jLabelRemove.setText("Remove");
        jLabelRemove.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 204, 0), new java.awt.Color(255, 204, 0), null, null));
        jLabelRemove.setOpaque(true);
        jLabelRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelRemoveMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelExit)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jLabelTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jButtonSelect))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(59, 59, 59)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabelAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelTitleNotAssigned)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelTitleAssigned)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))))
                .addGap(0, 60, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExit, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabelTitle)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSelect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTitleAssigned)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTitleNotAssigned)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelAdd)
                .addGap(45, 45, 45))
        );

        jLabelBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/back_button.png"))); // NOI18N
        jLabelBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelBackMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelBack)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSelectMouseClicked
        initTableCompetences();
    }//GEN-LAST:event_jButtonSelectMouseClicked

    private void jLabelExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelExitMouseClicked

    private void jLabelBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBackMouseClicked
        setVisible(false);
        ManagementCompetenceArea cArea = new ManagementCompetenceArea();
        cArea.setVisible(true);
    }//GEN-LAST:event_jLabelBackMouseClicked

    private void jLabelAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAddMouseClicked

        // Avoid empy selections 
        if (jTableNotInMaintainer.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please, select a competence first");
            return;
        }
        
        int index = jTableNotInMaintainer.getSelectedRow();
        // Get Maintainer's username in order to assign him the selected competence.
        int selectedIndex = jTableMaintainers.getSelectedRow();
        DefaultTableModel users = (DefaultTableModel) jTableMaintainers.getModel();
        String username = users.getValueAt(selectedIndex, 0).toString();

        try {
            list = comp.getAllCompetenceTarget(username);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (UsernotFoundException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage() + " or role is not MAINTAINER");
        }

        Integer id = Integer.parseInt(jTableNotInMaintainer.getModel().getValueAt(index, 0).toString());
        List<Integer> list_id = new LinkedList<>();
        list_id.add(id);
        // Assign the competence and update Competences' tables.
        try {
            int result = comp.assignCompetence(username, list_id);
            initTableCompetences();

            if (result > 0) {
                JOptionPane.showMessageDialog(null, "Competence assigned successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "No competence assigned!");
            }
        } catch (InvalidPermissionException | SQLException | UsernotFoundException | UnsuccessfulUpdateException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_jLabelAddMouseClicked

    private void jLabelMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinimizeMouseClicked
        this.setExtendedState(AssignmentCompetence.ICONIFIED);
    }//GEN-LAST:event_jLabelMinimizeMouseClicked

    private void jLabelRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelRemoveMouseClicked

        // Avoid empty selections
        if (jTableInMaintainer.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please, select a competence first");
            return;
        }
        
        int index = jTableInMaintainer.getSelectedRow();
        int selectedIndex = jTableMaintainers.getSelectedRow();
        DefaultTableModel users = (DefaultTableModel) jTableMaintainers.getModel();
        String username = users.getValueAt(selectedIndex, 0).toString();

        Integer id = Integer.parseInt(jTableInMaintainer.getModel().getValueAt(index, 0).toString());
        List<Integer> list_id = new LinkedList<>();
        list_id.add(id);

        // Unassign the competence and update Competences' tables.
        try {
            int result = comp.deassignCompetence(username, list_id);
            initTableCompetences();

            if (result > 0) {
                JOptionPane.showMessageDialog(null, "Competence deassigned successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "No competence deassigned!");
            }
        } catch (InvalidPermissionException | SQLException | UsernotFoundException | UnsuccessfulUpdateException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

        try {
            list = comp.getAllCompetenceTarget(username);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (UsernotFoundException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage() + " or role is not MAINTAINER");
        }

    }//GEN-LAST:event_jLabelRemoveMouseClicked

    /**
     * This method extracts all the maintainers from the DB and inserts them in
     * the listMaintainers; the list is used to fill the table.
     * 
     * @throws SQLException 
     */
    private void getMaintainers() throws SQLException {

        try {
            listMaintainers = user.getAllMaintainers();
        } catch (SQLException | UsernotFoundException ex) {
            Logger.getLogger(DeleteUser.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultTableModel users = (DefaultTableModel) jTableMaintainers.getModel();
        Object column[] = new Object[3];

        for (int i = 0; i < listMaintainers.size(); i++) {
            column[0] = listMaintainers.get(i).getUsername();
            column[1] = listMaintainers.get(i).getName();
            column[2] = listMaintainers.get(i).getSurname();

            users.addRow(column);
        }
    }

    /**
     * This method extracts all the Maintainers from the DB and inserts them in
     * the listMaintainers; the list is used to fill the table.
     */
    private void initTableCompetences() {

        if (jTableMaintainers.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please, select a maintainer first");
            return;
        }

        int selectedIndex = jTableMaintainers.getSelectedRow();
        DefaultTableModel users = (DefaultTableModel) jTableMaintainers.getModel();
        String username = users.getValueAt(selectedIndex, 0).toString();

        try {
            list = comp.getAllCompetenceTarget(username);
        } catch (SQLException | UsernotFoundException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        this.showCompetences(list);
    }

    /**
     * This method shows all the skills possessed/not possessed by the
     * maintainer in the correct table: they will be inserted in the
     * InMaintainer table, and may eventually be deassociated otherwise it will
     * be inserted in the NotInMaintainer table, and it will eventually be
     * possible to associate it with the maintainer.
     *
     * @param list: a list containing the associated/not associated maintainer's
     * activities
     */
    private void showCompetences(List<CompetenceInterface> list) {

        DefaultTableModel intoMaintainer = (DefaultTableModel) jTableInMaintainer.getModel();
        DefaultTableModel notIntoMaintainer = (DefaultTableModel) jTableNotInMaintainer.getModel();

        // Clean the tables for multiple assignments/deassignments
        int rowIn = intoMaintainer.getRowCount();
        for (int i = 0; i < rowIn; i++) {
            intoMaintainer.removeRow(0);
        }

        int rowNotIn = notIntoMaintainer.getRowCount();
        for (int i = 0; i < rowNotIn; i++) {
            notIntoMaintainer.removeRow(0);
        }

        for (int i = 0; i < list.size(); i++) {
            Object column[] = new Object[4];
            column[0] = list.get(i).getId();
            column[1] = list.get(i).getDescription();
            // Choose which table must contain the selected competence.
            if (list.get(i).isCompetenceLinked()) {
                intoMaintainer.addRow(column);
            } else {
                notIntoMaintainer.addRow(column);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssignmentCompetence.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssignmentCompetence.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssignmentCompetence.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssignmentCompetence.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new AssignmentCompetence().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(AssignmentCompetence.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSelect;
    private javax.swing.JLabel jLabelAdd;
    private javax.swing.JLabel jLabelBack;
    private javax.swing.JLabel jLabelExit;
    private javax.swing.JLabel jLabelMinimize;
    private javax.swing.JLabel jLabelRemove;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JLabel jLabelTitleAssigned;
    private javax.swing.JLabel jLabelTitleNotAssigned;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableInMaintainer;
    private javax.swing.JTable jTableMaintainers;
    private javax.swing.JTable jTableNotInMaintainer;
    // End of variables declaration//GEN-END:variables
}
